using System.Collections.Immutable;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FastGenericNew.SourceGenerator.InternalGenerator.Gen;

public static class RoslynPropsFileGenerator
{
    public static void Register(in IncrementalGeneratorInitializationContext context)
    {
        var declarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (syntax, _) => syntax is PropertyDeclarationSyntax { AttributeLists.Count: > 0 },
                static (syntaxContext, cancellationToken) =>
                {
                    var semanticModel = syntaxContext.SemanticModel;
                    var syntax = (PropertyDeclarationSyntax)syntaxContext.Node;
                    foreach (AttributeListSyntax attributeListSyntax in syntax.AttributeLists)
                    {
                        foreach (AttributeSyntax attributeSyntax in attributeListSyntax.Attributes)
                        {
                            if (semanticModel.GetSymbolInfo(attributeSyntax, cancellationToken).Symbol is IMethodSymbol attributeSymbol &&
                                attributeSymbol.ContainingType.ToDisplayString() == GeneratorOptionAttributeGenerator.AttributeFullName)
                            {
                                return semanticModel.GetDeclaredSymbol(syntax)?.Name!;
                            }
                        }
                    }
                    return null!; // Disable nullable warning
                    // 👇 Null items will be removed next line.
                })
            .Where(static c => c is not null)
            .WithComparer(StringComparer.Ordinal);

        var additionalTextsAndDeclarations =
            context.AdditionalTextsProvider.Combine(declarations.Collect());

        context.RegisterSourceOutput(additionalTextsAndDeclarations, (spc, source) => GenerateFile(source.Left, source.Right));
    }

    private static void GenerateFile(AdditionalText additionalText, ImmutableArray<string> names)
    {
        try
        {
            using var fs = new FileStream(additionalText.Path, FileMode.Create, FileAccess.Write, FileShare.None, 4096);
            using var writer = new StreamWriter(fs);
            writer.AutoFlush = false;
            writer.WriteLine("""
                             <!-- Generated by FastGenericNew.SourceGenerator.InternalGenerator.Gen.RoslynPropsFileGenerator -->
                             <Project>
                             	<!-- Declare MSBuild Properties -->
                             	<ItemGroup>
                             """);
            foreach (var name in names)
            {
                writer.WriteLine($$"""
                                   		<CompilerVisibleProperty Include="FastNew_{{name}}" />
                                   """);
            }
            writer.Write("""
                         	</ItemGroup>
                         </Project>
                         """);
        }
        catch (IOException ex)
        {
            if (ex.HResult != -2147024864)
                throw;
        }
    }
}